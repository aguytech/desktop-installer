#!/bin/bash
#
# write by Aguy

_PATH_BASE=`dirname "$(readlink -e "$0")"`
file=`readlink -e "${_PATH_BASE}/../../../inc-functions"`
if [ -f "$file" ]; then . "$file"; else echo -e "\e[0;31merror - unable to load file: ${file}\e[0;0m" && exit 0; fi

_PATH_LOG="/var/log/server/install"
S_FILE_INSTALL_CONF="${_PATH_LOG}/install.conf"
S_FILE_INSTALL_DONE="${_PATH_LOG}/install.done"

########################################  MAIN

_PART="btrfs1"

# exit
[ "$USER" != root ] && _echoE "You have to run this script under root privileges" && exit 1
[ -f "${S_FILE_INSTALL_DONE}" ] && _parthave "${_PART}" "${S_FILE_INSTALL_DONE}" && _echoi "performed *** ${_PART}" && exit 0
[ ! -d ${_PATH_LOG} ] && mkdir -p ${_PATH_LOG}

_echoT "btrfs configuration: AFTER installation & BEFORE reboot"
_askyn "This part have to be launched after installation and BEFORE reboot\nConfirm" && [ "$_ANSWER" == "n" ] && exit 0

#_echoT "------------------ root user"
#echo -e "ct\nct" | sudo passwd root
#echo "give 'ct' for password :" && su -

_echoT "------------------ Data"

[ -z "${_uefi+x}" ] && _askyn "Uefi are enabled for the installation ? " && _uefi=${_ANSWER/n/}
_confset _uefi "$_uefi"

[ -z ${_USERNAME+x} ] && _menu "Select a user name" xenial xenialg && _USERNAME="$_ANSWER"
_confset _USERNAME "${_USERNAME}"

[ -z ${_DEVICE_SYS+x} ] && echo -e "${yellow}$(blkid|grep -v /loop)${cclear}" && _menu "Select a device for system installation" $(blkid -o device|grep -v '/loop'|xargs) && _DEVICE_SYS=$_ANSWER
_confset _DEVICE_SYS "$_DEVICE_SYS"

[ -z ${_SYSNAME+x} ] && anstmp=${_USERNAME} && _askno "Give the btrfs volume name for system device '$_DEVICE_SYS' for btrfs ($anstmp)" && _SYSNAME=${_ANSWER:-$anstmp}
_confset _SYSNAME "$_SYSNAME"

[ -z ${_DEVICE_EXT+x} ] && lsblk -e 11,7 -o name,size,mountpoint && anstmp='' && _askno "Give a device for 'extend' device if exists ($anstmp)" && _DEVICE_EXT=${_ANSWER:-$anstmp}
_confset _DEVICE_EXT "$_DEVICE_EXT"

[ -z ${_DEVICE_GRUB+x} ] && lsblk -e 11,7 -o name,size,mountpoint && anstmp='/dev/sda' && _askno "Give a device for grub installation" "$(blkid -o device|grep -v '/loop'|xargs) ($anstmp)" && _DEVICE_GRUB=${_ANSWER:-$anstmp}
_confset _DEVICE_GRUB "$_DEVICE_GRUB"

_echoi "--------------------------"
cat "${S_FILE_INSTALL_CONF}"
_echoi "--------------------------"
_askyn "PLease confirm installation" && [ "$_ANSWER" == n ] && exit 1


############ btrfs volumes & dirs
_echoT "------------------ btrfs volumes && dirs"

mount "$_DEVICE_SYS" /mnt
cd /mnt
btrfs subvolume list .

mv @ "$_SYSNAME"
! btrfs subvolume list .|grep -q ".* home$" && btrfs subvolume create home
! [ -d "home/${_USERNAME}" ] && mv "@home/${_USERNAME}" "home/${_USERNAME}"

btrfs subvolume delete @home

[ -d create ] && rm -fR create
[ -d ubiquity-apt-clone ] && rm -fR ubiquity-apt-clone
[ -d var ] && rm -fR var

_echoT "btrfs subvolume list $PWD"
_echoi "$(btrfs subvolume list .)"

# fstab
sed -i "s|@home|home|" "$_SYSNAME/etc/fstab"
sed -i "s|@|$_SYSNAME|" "$_SYSNAME/etc/fstab"

_echoT "cat $_SYSNAME/etc/fstab"
_echoi "$(cat "$_SYSNAME/etc/fstab")"

cd /
umount /mnt

_askyn "Check above file '/etc/fstab' & confirm to continue" && [ "$_ANSWER" == n ] && exit 1


############  GRUB
_echoT "------------------ chroot && prepare grub"

# grub
_echoT "Mount devices"
cd /
mount -o subvol="$_SYSNAME" "$_DEVICE_SYS" /mnt
for i in dev dev/pts sys proc run; do mount --bind /$i mnt/$i; done

# uefi
[ "$_uefi" ] && mount /dev/sda1 /mnt/boot/efi

_echoT "Grub install"
_echoi "after you are 'chrooted' please enter this line :"
_echoE "grub-install --recheck $_DEVICE_GRUB"
_echoE "update-grub"
_echoE "exit"
chroot mnt

# uefi
[ "$_uefi" ] && umount mnt/boot/efi

_echoT "Umount devices"
for i in run proc sys dev/pts dev; do umount mnt/$i; done
umount /mnt


########################################  END

_echoT "------------------ write ${_PART}"
_partadd "${_PART}" "${S_FILE_INSTALL_DONE}"

_echoT "#################### END ${_PART}"

_echoT "Mount & write conf & logs"
mount "$_DEVICE_SYS" /mnt
dir=/mnt/$_SYSNAME${_PATH_LOG}
! [ -d "$dir" ] && mkdir -p "$dir"

cp -a "${S_FILE_INSTALL_DONE}" "$dir/"
cp -a "${S_FILE_INSTALL_CONF}" "$dir/"
chown -R :1000 "$dir" && chmod -R g+rw "$dir"
umount /mnt

_echoi "You have to start the global installation script after the reboot"
_askyn "The computer now will reboot, please confirm"

[ "$_ANSWER" == y ] && reboot

exit


<<keep
_uefi=y
_USERNAME=xenialg
_DEVICE_SYS=/dev/sda2
_SYSNAME=xenialg
_DEVICE_EXT=
_DEVICE_GRUB=/dev/sda
keep


<<keep

########################################  SNAPPER

FILE=/etc/snapper/config-templates/default
cp -a $FILE $FILE.keep$(date +%s)
str=${_USERNAME}; sed -i "s|^\(ALLOW_USERS=\).*|\1\"$str\"|" $FILE
str=${_USERNAME}; sed -i "s|^\(ALLOW_GROUPS=\).*|\1\"$str\"|" $FILE
str=no; sed -i "s|^\(TIMELINE_CREATE=\).*|\1\"$str\"|" $FILE
str=no; sed -i "s|^\(TIMELINE_CLEANUP=\).*|\1\"$str\"|" $FILE

FILE=/etc/updatedb.conf
cp -a $FILE $FILE.keep$(date +%s)
sed -i 's|^\(# PRUNENAMES.*\)|\1\nPRUNENAMES = ".snapshots"|' $FILE


cd /
# mandatory
snapper -c home.${_USERNAME} create-config /home/${_USERNAME}
snapper -c lxd create-config /var/lib/lxd
# full
snapper -c home create-config /home
snapper -c home.shared create-config /home/shared
snapper -c save create-config /save
snapper -c ext create-config /ext
snapper -c ext.backups create-config /ext/backups
snapper -c ext.ovh create-config /ext/ovh
snapper -c ext.shared create-config /ext/shared

snapper list-configs


########################################  SNAPPER_GUI

# see https://github.com/ricardomv/snapper-gui
apt install -y python3 libgtksourceview-3.0-1 python3-dbus python3-setuptools

cd /tmp
wget https://github.com/ricardomv/snapper-gui/archive/master.zip
unzip master.zip
cd snapper-gui-master
python3 setup.py install

# shortcut
echo "[Desktop Entry]
Name=Snapper GUI
GenericName=Snapper GUI
Comment=Gui for snapper
Exec=gksudo snapper-gui
Terminal=false
Type=Application
Icon=/home/shared/Soft/multi/snapper.png
Categories=Application;GTK;Development;IDE;BTRFS;" > /home/${_USERNAME}/.local/share/applications/snapper-gui.desktop

keep

