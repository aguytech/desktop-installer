#!/bin/bash
#
# write by Aguy


_echoT "#################### START ${_PART}"

########################################  MAIN


_echoT "Part 2 of btrfs configuration"
_askyn "This part have to be launched after installation and AfTER reboot\nConfirm" && [ "$_ANSWER" == "n" ] && exit 0


#_echoT "------------------ root user"
#echo -e "ct\nct" | sudo passwd root
#echo "give 'ct' for password :" && su -


_echoT "------------------ Data"

! [ "$_LXD" ] && _askyn "Do you want to configure computer for lxd ? " && _LXD=${_ANSWER/n/}
_confset _LXD "$_LXD"

! [ "$_ssd" ] && _askyn "the device '$_DEVICE_SYS' named '$_SYSNAME' are they a ssd disk ? " && _ssd=${_ANSWER/n/}
_confset _ssd "$_ssd"

! [ "$_mem" ] && anstmp=1G && _askno "Give the size of memory used for /tmp dir ($anstmp)" && _mem=${_ANSWER:-$anstmp}
_confset _mem "$_mem"


_echoT "------------------ mount $_DEVICE_SYS"

# sys
sudo mount $_DEVICE_SYS /mnt
cd /mnt

#mv $_SYSNAME/var/log $_SYSNAME/var/log.keep

_echoT "btrfs subvolume list $PWD"
_echoi "$(sudo btrfs subvolume list .)"


_echoT "------------------ create btrfs subvolumes"

#subvs="home/shared save"
subvs="save"
[ "$_LXD" ] && subvs+=" lxd-$_SYSNAME"
# $_SYSNAME/var/log $_SYSNAME/.snapshots

for subv in $subvs; do
	! [[ $(sudo btrfs subvolume list . |grep ".* $subv$") ]] && sudo btrfs subvolume create $subv
done

_echoT "btrfs subvolume list $PWD"
_echoi "$(sudo btrfs subvolume list .)"

#chmod o-rwx $_SYSNAME/.snapshots
#rsync -av $_SYSNAME/var/log.keep/ $_SYSNAME/var/log/
#rm -fR $_SYSNAME/var/log.keep

_echoT "------------------ umount $_DEVICE_SYS"

cd /
sudo umount /mnt


[ "$_DEVICE_EXT" ] && device=$_DEVICE_EXT || device=$_DEVICE_SYS

_echoT "------------------ mount $device"

sudo mount $device /mnt
cd /mnt

_echoT "btrfs subvolume list $PWD"
_echoi "$(sudo btrfs subvolume list .)"


_echoT "------------------ create btrfs subvolumes"

subvs="ext ext/backups ext/ovh ext/shared"
for subv in $subvs; do
	! [ "$(sudo btrfs subvolume list . |grep ".* ${subv}$")" ] && sudo btrfs subvolume create $subv
	sudo chown :1000 $subv
	sudo chmod g+rwx $subv
done

_echoT "btrfs subvolume list $PWD"
_echoi "$(sudo btrfs subvolume list .)"

cd /
sudo umount /mnt


_echoT "------------------ create dirs & rights"

dirs="/btrfs/sys /btrfs/ext /ext ext/backups ext/ovh ext/shared /home /home/shared /home/shared/dev/bs /home/shared/www /opt /usr/local/bs /save/${_USERNAME}"
[ "$_LXD" ] && dirs+=" /var/lib/lxd"

for dir in $dirs; do
	! [ -d $dir ] && sudo mkdir -p $dir
	sudo chown :1000 $dir
	sudo chmod g+rwx $dir
done


_echoT "------------------ /etc/fstab modify"

# fstab
uuidsys=$(blkid |grep $_DEVICE_SYS |sed 's|.*UUID="\([^"]*\)" .*|\1|')
uuidext=$(blkid |grep $device |sed 's|.*UUID="\([^"]*\)" .*|\1|')
_echoi "uuidsys=$uuidsys\nuuidext=$uuidext"

file=/etc/fstab
! sudo [ -f ${file}.keep ] && sudo cp -a ${file} ${file}.keep
sudo sed -i 's|^\(UUID=.* btrfs .*\)$|#\1|' $file

echo "
# btrfs sys
UUID=$uuidsys      /               btrfs   defaults,noatime,autodefrag,compress=lzo,subvol=$_SYSNAME      0    1
UUID=$uuidsys      /home           btrfs   defaults,noatime,autodefrag,compress=lzo,subvol=home          0    2
UUID=$uuidsys      /var/lib/lxd    btrfs   defaults,noatime,autodefrag,compress=lzo,subvol=lxd-$_SYSNAME  0    2
UUID=$uuidsys      /save           btrfs   defaults,noatime,autodefrag,compress=lzo,subvol=save          0    2" | sudo tee -a $file
! [ "$_DEVICE_EXT" ] && echo "UUID=$uuidsys      /ext           btrfs   defaults,noatime,autodefrag,compress=lzo,subvol=ext           0    2" | sudo tee -a $file
echo "UUID=$uuidsys      /btrfs/sys      btrfs   defaults,noauto,noatime,autodefrag,compress=lzo               0    2" | sudo tee -a $file

[ "$_ssd" ] && sudo sed -i 's|noatime,|noatime,ssd,|' $file

[ "$_DEVICE_EXT" ] && echo "
# btrfs ext
UUID=$uuidext      /ext            btrfs   defaults,noatime,autodefrag,compress=lzo,subvol=ext           0    2
UUID=$uuidext      /btrfs/ext      btrfs   defaults,noauto,noatime,autodefrag,compress=lzo               0    2" | sudo tee -a $file

[ "${_mem:0:1}" != 0 ] && echo "
# tmp to tmpfs
tmpfs              /tmp            tmpfs   nodev,nosuid,size=${_mem}    0    0

# bind
/home/shared/dev/bs   /usr/local/bs  none    bind                    0    0" | sudo tee -a $file

_echoi "$(cat $file)"

_echoT "------------------ network interface grub"

sudo sed -i 's|^\(GRUB_CMDLINE_LINUX=".*\)"|\1 biosdevname=0"|' /etc/default/grub
sudo update-grub
# see https://github.com/agronick/apt-btrfs-snapper


#mount -a

########################################  END

_echoT "------------------ write ${_PART}"
_partadd "${_PART}" "${S_FILE_INSTALL_DONE}"

_echoT "#################### END ${_PART}"

_echoi "You have to restart the computer for system file modifications"
_echoi "After restarting you can follow installation"
_askyn "The computer now will reboot, please confirm" && [ "$_ANSWER" == n ] && exit 1

reboot


<<keep
_LXD=y
_ssd=
_mem=2G
keep


<<keep

_echoT "------------------ btrfs tools install"

sudo apt install -y apt-btrfs-snapshot snapper # system-storage-manage btrbk
# see https://github.com/agronick/apt-btrfs-snapper


########################################  SNAPPER

file=/etc/snapper/config-templates/default
cp -a $file $file.keep$(date +%s)
str=${_USERNAME}; sed -i "s|^\(ALLOW_USERS=\).*|\1\"$str\"|" $file
str=${_USERNAME}; sed -i "s|^\(ALLOW_GROUPS=\).*|\1\"$str\"|" $file
str=no; sed -i "s|^\(TIMELINE_CREATE=\).*|\1\"$str\"|" $file
str=no; sed -i "s|^\(TIMELINE_CLEANUP=\).*|\1\"$str\"|" $file

file=/etc/updatedb.conf
cp -a $file $file.keep$(date +%s)
sed -i 's|^\(# PRUNENAMES.*\)|\1\nPRUNENAMES = ".snapshots"|' $file


cd /
# mandatory
snapper -c home.${_USERNAME} create-config /home/${_USERNAME}
snapper -c lxd create-config /var/lib/lxd
# full
snapper -c home create-config /home
snapper -c home.shared create-config /home/shared
snapper -c save create-config /save
snapper -c ext create-config /ext
snapper -c ext.backups create-config /ext/backups
snapper -c ext.ovh create-config /ext/ovh
snapper -c ext.shared create-config /ext/shared

snapper list-configs


########################################  SNAPPER_GUI

# see https://github.com/ricardomv/snapper-gui
apt install -y python3 libgtksourceview-3.0-1 python3-dbus python3-setuptools

cd /tmp
wget https://github.com/ricardomv/snapper-gui/archive/master.zip
unzip master.zip
cd snapper-gui-master
python3 setup.py install

# shortcut
echo "[Desktop Entry]
Name=Snapper GUI
GenericName=Snapper GUI
Comment=Gui for snapper
Exec=gksudo snapper-gui
Terminal=false
Type=Application
Icon=/home/shared/Soft/multi/snapper.png
Categories=Application;GTK;Development;IDE;BTRFS;" > /home/${_USERNAME}/.local/share/applications/snapper-gui.desktop

keep

