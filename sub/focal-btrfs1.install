#!/bin/bash
#
# write by Aguy

_path_base=`dirname "$(readlink -e "$0")"`
file=`readlink -e "${_path_base}/../inc-functions"`
if [ -f "$file" ]; then . "$file"; else echo -e "\e[0;31merror - unable to load file '${file}' from ${BASH_SOURCE[0]}${cclear}\e[0;0m" && exit 0; fi

_PATH_LOG="/var/log/server/install"
S_FILE_INSTALL_CONF="${S_PATH_CONF}/install.conf"
S_FILE_INSTALL_DONE="${S_PATH_CONF}/install.done"

########################################  MAIN

_PART="btrfs1"

# exit
[ "$USER" != root ] && _echoE "You have to run this script under root privileges" && exit 1
[ -f "${S_FILE_INSTALL_DONE}" ] && _parthave "${_PART}" "${S_FILE_INSTALL_DONE}" && _echoi "performed *** ${_PART}" && exit 0

[ ! -d ${_PATH_LOG} ] && mkdir -p ${_PATH_LOG}

_echoT "btrfs configuration: AFTER installation & BEFORE reboot"
_askyn "This part have to be launched after installation and BEFORE reboot\nConfirm" && [ "$_ANSWER" == "n" ] && exit 0

#_echoT "------------------ root user"
#echo -e "ct\nct" | sudo passwd root
#echo "give 'ct' for password :" && su -

_echoT "------------------ Data"

[ -z ${_UEFI+x} ] && echo -e "${yellow}$(blkid|grep -v /loop)${cclear}" && _askno "If UEFI are enabled, give partition name for UEFI" && _UEFI=${_ANSWER:-$anstmp}
_confset _UEFI "$_UEFI"

[ -z ${_USERNAME+x} ] && _menu "Select a user name" $USER ubuntu focal && _USERNAME="$_ANSWER"
_confset _USERNAME "${_USERNAME}"

[ -z ${_DEVICE_SYS+x} ] && _menu "Select a device for system installation" $(blkid -o device|grep -v '/loop'|xargs) && _DEVICE_SYS=$_ANSWER
_confset _DEVICE_SYS "${_DEVICE_SYS}"

[ -z ${_SYSNAME+x} ] && anstmp=focal && _askno "Give a prefix/sufix btrfs volume name for system device '${_DEVICE_SYS}' ($anstmp)" && _SYSNAME=${_ANSWER:-$anstmp}
_confset _SYSNAME "${_SYSNAME}"

[ -z ${_DEVICE_EXT+x} ] && lsblk -e 11,7 -o name,size,mountpoint && anstmp='' && _askno "Give a device for 'extend' device if exists ($anstmp)" && _DEVICE_EXT=${_ANSWER:-$anstmp}
_confset _DEVICE_EXT "$_DEVICE_EXT"

[ -z ${_DEVICE_GRUB+x} ] && lsblk -e 11,7 -o name,size,mountpoint && anstmp='/dev/sda' && _askno "Give a device for grub installation" "$(blkid -o device|grep -v '/loop'|xargs) ($anstmp)" && _DEVICE_GRUB=${_ANSWER:-$anstmp}
_confset _DEVICE_GRUB "$_DEVICE_GRUB"

_echoi "--------------------------"
cat "${S_FILE_INSTALL_CONF}"
_echoi "--------------------------"
_askyn "PLease confirm installation" && [ "$_ANSWER" == n ] && exit 1


############ btrfs volumes & dirs
_echoT "------------------ btrfs volumes && dirs"

mount "${_DEVICE_SYS}" /mnt
cd /mnt
btrfs subvolume list .

# mv system
if [ -d @ ]; then
    [ -d "${_SYSNAME}" ] && mv "${_SYSNAME}" "${_SYSNAME}.keep$(date +%s)"
    mv @ "${_SYSNAME}"
fi
# create home
! [ "$(btrfs subvolume show home 2>/dev/null)" ] && btrfs subvolume create home
# backup & create volume for user-$user
[ "$(btrfs subvolume show user-${_SYSNAME} 2>/dev/null)" ] && mv "user-${_SYSNAME}" "user-${_SYSNAME}.keep$(date +%s)"
btrfs subvolume create user-${_SYSNAME}
# move data user to user-$user
if [ -d "@home/${_USERNAME}" ]; then
    mv @home/${_USERNAME}/* user-${_SYSNAME}/
    mv @home/${_USERNAME}/.??* user-${_SYSNAME}/
fi
chown 1000.1000 -R "user-${_SYSNAME}"
# create path for binding user-$user
! [ -d "home/${_USERNAME}" ] && mkdir "home/${_USERNAME}"
chown 1000.1000 -R "home/${_USERNAME}"
# delete @home
btrfs subvolume delete @home

[ -d create ] && rm -fR create
[ -d ubiquity-apt-clone ] && rm -fR ubiquity-apt-clone
[ -d var ] && rm -fR var

_echoT "btrfs subvolume list $PWD"
_echoi "$(btrfs subvolume list .)"

# fstab
file="${_SYSNAME}/etc/fstab"
[ -f ] && cp -a "${file}" "${file}.keep$(date +%s)"
sed -i "s|@home|home|" "${file}"
sed -i "s|@|${_SYSNAME}|" "${file}"
str=$(sed -n "/subvol=home/p" "${file}")
str=${str/\/home/\/home\/${_USERNAME}}
str=${str/subvol=home/subvol=user-${_SYSNAME}}
sed -i "/subvol=home/ a${str}" "${file}"

_echoT "cat ${file}"
_echoi "$(cat "${file}")"

cd /
umount /mnt

_askyn "Check above file '/etc/fstab' & confirm to continue" && [ "$_ANSWER" == n ] && exit 1


############  GRUB
_echoT "------------------ chroot && prepare grub"

# grub
_echoT "Mount devices"
cd /
mount -o subvol="${_SYSNAME}" "${_DEVICE_SYS}" /mnt
for i in dev dev/pts sys proc run; do mount --bind /$i mnt/$i; done

# remove save default
sed -i "s|^\(GRUB_SAVEDEFAULT=\).*|\1false|" /mnt/etc/default/grub

# uefi
[ "$_UEFI" ] && mount "$_UEFI" /mnt/boot/efi

_echoT "Grub install"
_echoi "after you are 'chrooted' please enter this line :"
_echoI "grub-install --recheck $_DEVICE_GRUB"
_echoI "update-grub"
_echoI "exit"
chroot mnt

# uefi
[ "$_UEFI" ] && umount mnt/boot/efi

_echoT "Umount devices"
for i in run proc sys dev/pts dev; do umount mnt/$i; done
umount /mnt


########################################  END

_echoT "------------------ write ${_PART}"
_partadd "${_PART}" "${S_FILE_INSTALL_DONE}"

_echoT "#################### END ${_PART}"

_echoT "------------------ mount $_DEVICE_SYS"

mount "${_DEVICE_SYS}" /mnt

_echoT "------------------ copy conf & done"

path="/mnt/${_SYSNAME}/etc/server"
[ -d "${path}" ] && mv "${path}" "${path}.keep$(date +%s)"

cp -a "/etc/server" "${path}"
chown 1000.1000 -R "${path}"
chown 0.1000 "${path}"
chmod g+w "${path}"
chown 0.0 "${path}/ssl"
chmod 750 "${path}/ssl"

_echoT "------------------ correct rights on /etc/sudoers.d"

chown 0.0 "/mnt/${_SYSNAME}/etc/sudoers.d"

#_echoT "------------------ copy /bs"

#! [ -d "/usr/local/bs" ] && cp -a "${_path_base}/../../bs" "/usr/local/"

_echoT "------------------ umount $_DEVICE_SYS"

umount /mnt

_echoi "You have to start the global installation script after the reboot"
_askyn "The computer now will reboot, please confirm"

[ "$_ANSWER" == y ] && reboot

exit


