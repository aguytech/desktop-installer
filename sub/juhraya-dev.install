#!/bin/bash
#
# write by Aguy


_echoT "#################### START ${_PART}"

_FILE_DEV_DONE=${S_PATH_CONF}/dev.done
_RELEASE_NAME_DEV=inc_${S_RELEASE_NAME}

str="# dev"; ! grep -q "^$str" "${S_FILE_INSTALL_CONF}" && echo -e "\n$str" >> "${S_FILE_INSTALL_CONF}"


########################################  MAIN

_echoT "------------------ data"

# python
[ -z ${_PYTHON+x} ] && anstmp=y && _askno "Do you want install Pyhton part? ($anstmp)" && _PYTHON=${_ANSWER:-$anstmp} && _PYTHON=${_PYTHON/n/} && _confset _PYTHON "$_PYTHON"

# sublimetext
[ -z ${_SUBLIMETEXT+x} ] && anstmp=y && _askno "Do you want install 'sublime-text' sofware? ($anstmp)" && _SUBLIMETEXT=${_ANSWER:-$anstmp} && _SUBLIMETEXT=${_SUBLIMETEXT/n/} && _confset _SUBLIMETEXT "$_SUBLIMETEXT"

if [ "$_SUBLIMETEXT" ]; then
	[ -z ${_SUBLIMETEXT_BACK+x} ] && anstmp=y && _askno "Do you want to Restore a keeping instance of 'sublime-text'? ($anstmp)" && _SUBLIMETEXT_BACK=${_ANSWER:-$anstmp} && _SUBLIMETEXT_BACK=${_SUBLIMETEXT_BACK/n/} && _confset _SUBLIMETEXT_BACK "$_SUBLIMETEXT_BACK"

	[ -z ${_SUBLIMETEXT_VER+x} ] && anstmp="3176" && _askno "Please give 'sublime-text' build version to install ? ($anstmp)" && _SUBLIMETEXT_VER=${_ANSWER:-$anstmp} && _confset _SUBLIMETEXT_VER "$_SUBLIMETEXT_VER"
fi

# smartgit
[ -z ${_SMARTGIT+x} ] && anstmp=n && _askno "Do you want install 'Smartgit' sofware? ($anstmp)" && _SMARTGIT=${_ANSWER:-$anstmp} && _SMARTGIT=${_SMARTGIT/n/} && _confset _SMARTGIT "$_SMARTGIT"

if [ "$_SMARTGIT" ]; then
	[ -z ${_SMARTGIT_BACK+x} ] && anstmp=y && _askno "Do you want to Restore a keeping instance of 'eclipse'? ($anstmp)" && _SMARTGIT_BACK=${_ANSWER:-$anstmp} && _SMARTGIT_BACK=${_SMARTGIT_BACK/n/} && _confset _SMARTGIT_BACK "$_SMARTGIT_BACK"

	[ -z ${_SMARTGIT_VER+x} ] && anstmp="19_1_4" && _askno "Please give 'Smartgit' version to install ? ($anstmp)" && _SMARTGIT_VER=${_ANSWER:-$anstmp} && _confset _SMARTGIT_VER "$_SMARTGIT_VER"
fi

# gitkraken
[ -z ${_GITKRAKEN+x} ] && anstmp=n && _askno "Do you want install 'GitKraken' sofware? ($anstmp)" && _GITKRAKEN=${_ANSWER:-$anstmp} && _GITKRAKEN=${_GITKRAKEN/n/} && _confset _GITKRAKEN "$_GITKRAKEN"

# firefoxdev
[ -z ${_FIREFOXDEV+x} ] && anstmp=y && _askno "Do you want install 'Firefox Developper' sofware? ($anstmp)" && _FIREFOXDEV=${_ANSWER:-$anstmp} && _FIREFOXDEV=${_FIREFOXDEV/n/} && _confset _FIREFOXDEV "$_FIREFOXDEV"

if [ "$_FIREFOXDEV" ]; then
	[ -z ${_FIREFOXDEV_VER+x} ] && anstmp="71.0b4" && _askno "Please give 'Firefox Developper' version to install ? ($anstmp)" && _FIREFOXDEV_VER=${_ANSWER:-$anstmp} && _confset _FIREFOXDEV_VER "$_FIREFOXDEV_VER"
fi

# eclipse
[ -z ${_ECLIPSE+x} ] && anstmp=y && _askno "Do you want install 'Eclipse' sofware? ($anstmp)" && _ECLIPSE=${_ANSWER:-$anstmp} && _ECLIPSE=${_ECLIPSE/n/} && _confset _ECLIPSE "$_ECLIPSE"

if [ "$_ECLIPSE" ]; then
	[ -z ${_ECLIPSE_BACK+x} ] && anstmp=y && _askno "Do you want to Restore a keeping instance of 'eclipse'? ($anstmp)" && _ECLIPSE_BACK=${_ANSWER:-$anstmp} && _ECLIPSE_BACK=${_ECLIPSE_BACK/n/} && _confset _ECLIPSE_BACK "$_ECLIPSE_BACK"

	[ -z ${_ECLIPSE_VER+x} ] && anstmp="2019-09" && _askno "Please give Eclipse version to install ? ($anstmp)" && _ECLIPSE_VER=${_ANSWER:-$anstmp} && _confset _ECLIPSE_VER "$_ECLIPSE_VER"

	[ -z ${_ECLIPSE_THEME+x} ] && anstmp="python" && _askno "Please give Eclipse them to restore ? ($anstmp)" && _ECLIPSE_THEME=${_ANSWER:-$anstmp} && _confset _ECLIPSE_THEME "$_ECLIPSE_THEME"
fi

# squirrel
[ -z ${_SQUIRREL+x} ] && anstmp=y && _askno "Do you want install 'SquirrelSQL' sofware? ($anstmp)" && _SQUIRREL=${_ANSWER:-$anstmp} && _SQUIRREL=${_SQUIRREL/n/} && _confset _SQUIRREL "$_SQUIRREL"

if [ "$_SQUIRREL" ]; then
	[ -z ${_SQUIRREL_BACK+x} ] && anstmp=y && _askno "Do you want to Restore a keeping instance of 'SquirrelSQL'? ($anstmp)" && _SQUIRREL_BACK=${_ANSWER:-$anstmp} && _SQUIRREL_BACK=${_SQUIRREL_BACK/n/} && _confset _SQUIRREL_BACK "$_SQUIRREL_BACK"

	[ -z ${_SQUIRREL_VER+x} ] && anstmp="4.0.0" && _askno "Please give 'SquirrelSQL' version to install ? ($anstmp)" && _SQUIRREL_VER=${_ANSWER:-$anstmp} && _confset _SQUIRREL_VER "$_SQUIRREL_VER"
fi

# dbeaver
[ -z ${_DBEAVER+x} ] && anstmp=y && _askno "Do you want install 'DBeaver' sofware? ($anstmp)" && _DBEAVER=${_ANSWER:-$anstmp} && _DBEAVER=${_DBEAVER/n/} && _confset _DBEAVER "$_DBEAVER"


####################  CONNECTORS-

_PARTDEV=CONNECTORS
if ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  PYTHON-

_PARTDEV=PYTHON
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  SUBLIMETEXT-

_PARTDEV=SUBLIMETEXT
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  SMARTGIT-

_PARTDEV=SMARTGIT
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  GITKRAKEN-

_PARTDEV=GITKRAKEN
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  FIREFOXDEV-

_PARTDEV=FIREFOXDEV
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  ECLIPSE-

_PARTDEV=ECLIPSE
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  SQUIRREL-

_PARTDEV=SQUIRREL
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

####################  DBEAVER-

_PARTDEV=DBEAVER
_PARTTEST="_${_PART}DEV"
if [ "${!_PARTTEST}" ] && ! _parthave "${_PART}DEV" "$_FILE_DEV_DONE"; then
	. "${_PATH_BASE_SUB}/${_RELEASE_NAME_DEV}-${_PARTDEV,,}.install" && [ "$_STEP" ] && _askno "Valid to continue"
else _echoi "performed **** ${_PART}DEV"; fi

########################################  END

_echoT "------------------ write ${_PART}"
_partadd "${_PART}" "${S_FILE_INSTALL_DONE}"

_echoT "#################### END ${_PART}"
