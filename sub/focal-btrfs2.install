#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${S_RELEASE_NAME}-${_PART}"

########################  MAIN

_echoT "Part 2 of btrfs configuration"
_askyn "This part have to be launched after installation and AfTER reboot\nConfirm" && [ "${_ANSWER}" == n ] && exit 0


_echot "------------------ root user"
_ask "Give the password for root" && echo -e "${_ANSWER}\n${_ANSWER}" | sudo passwd root

_echot "------------------ Data"

[ "${S_HOST_TYPE}" = lxd ] && _LXD=y
[ -z "${_LXD}" ] && _askyn "Do you want to configure computer for lxd ? " && _LXD=${_ANSWER/n/}
_confset _LXD "${_LXD}"

[ -z "${_SSD}" ] && _askyn "the device '${_DEVICE_SYS}' named '${_SYSNAME}' are they a ssd disk ? " && _SSD=${_ANSWER/n/}
_confset _SSD "${_SSD}"

[ -z "${_MEM}" ] && anstmp=2G && _askno "Give the size of memory used for /tmp dir ($anstmp)" && _MEM=${_ANSWER:-$anstmp}
_confset _MEM "${_MEM}"

########################  mount ${_DEVICE_SYS}

_echot "------------------ mount ${_DEVICE_SYS}"
sudo mount ${_DEVICE_SYS} /mnt
cd /mnt

#mv ${_SYSNAME}/var/log ${_SYSNAME}/var/log.keep
_echO "btrfs subvolume list ${PWD}"
_echo "$(sudo btrfs subvolume list .)"

_echot "------------------ btrfs create save"
sudo [ -d save ] || sudo btrfs subvolume create save

if [ "${_DEVICE_EXT}" ]; then
	device_ext=${_DEVICE_EXT}
	sub_ext=
else
	device_ext=${_DEVICE_SYS}
	sub_ext=/ext
	sudo btrfs subvolume create ext
fi

_echot "------------------ create /ext"
sudo [ -d /ext ] || sudo mkdir /ext

if [ "${_LXD}" ]; then
	_echot "------------------ btrfs lxd"
	path_lxd=/vm

	sudo [ -d ${path_lxd} ] || mkdir ${path_lxd} 
	sudo [ -d lxd-${_SYSNAME} ] && sudo mv "lxd-${_SYSNAME}" "lxd-${_SYSNAME}.$(date +%s)"
	sudo btrfs subvolume create lxd-${_SYSNAME}
fi

_echO "btrfs subvolume list ${PWD}"
_echo "$(sudo btrfs subvolume list .)"

_echot "------------------ umount ${_DEVICE_SYS}"
cd /
sudo umount /mnt

########################  mount ${device_ext}

_echot "------------------ mount ${device_ext}"
sudo mount ${device_ext} /mnt

_echot "------------------ rights ${device_ext}"
sudo chown :1000 -R /mnt${sub_ext}
sudo chmod g+rwx -R /mnt${sub_ext}

_echot "------------------ umount ${device_ext}"
sudo umount /mnt


_echot "------------------ /etc/fstab global"
# fstab
uuidsys=$(sudo blkid |grep ${_DEVICE_SYS} |sed 's|.* UUID="\([^"]\+\)" .*|\1|')
[ "${_DEVICE_EXT}" ] && uuidext=$(sudo blkid |grep ${_DEVICE_EXT} |sed 's|.* UUID="\([^"]\+\)" .*|\1|')
_echO "uuidsys=${uuidsys}\nuuidext=${uuidext}"

! [ "${uuidsys}" ] && _ask "Please give the UUID for sys" && uuidsys=${_ANSWER} && _echO "uuidsys=${uuidsys}"
[ "${_DEVICE_EXT}" ] && ! [ "${uuidext}" ] && _ask "Please give the UUID for ext" && uuidext=${_ANSWER} && _echO "uuidext=${uuidext}"

file=/etc/fstab
_keepcpts ${file}
sudo sed -i '/^UUID=.* btrfs .*/ s|^|#|' ${file}

sudo sh -c "echo '
# btrfs sys
UUID=${uuidsys}   /                 btrfs   defaults,noatime,space_cache,autodefrag,compress=zstd,subvol=/${_SYSNAME}      0    1
UUID=${uuidsys}   /home             btrfs   defaults,noatime,space_cache,autodefrag,compress=zstd,subvol=/home       0    2
UUID=${uuidsys}   /home/${_USERNAME}      btrfs   defaults,noatime,space_cache,autodefrag,compress=zstd,subvol=/user-${_SYSNAME} 0    2
UUID=${uuidsys}   /save             btrfs   defaults,noatime,space_cache,autodefrag,compress=zstd,subvol=/save       0    2' >> ${file}"
[ "${_LXD}" ] && sudo sh -c "echo 'UUID=${uuidsys}   ${path_lxd}               btrfs   defaults,noatime,space_cache,autodefrag,compress=zstd,subvol=/lxd-${_SYSNAME}      0    2' >> ${file}"

[ "${_DEVICE_EXT}" ] || sudo sh -c "echo 'UUID=${uuidsys}   /ext              btrfs   defaults,noatime,space_cache,autodefrag,compress=zstd,subvol=/ext        0    2' >> ${file}"
sudo sh -c "echo '\nUUID=${uuidsys}   /btrfs/sys        btrfs   defaults,noauto,noatime,space_cache,autodefrag,compress=zstd            0    2' >> ${file}"

[ "${_SSD}" ] && sudo sed -i '/btrfs/ s|noatime,|noatime,ssd,|' ${file}

if grep -q '^tmp.*\/tmp' /etc/fstab; then
	[ "${_MEM:0:1}" != 0 ] && sudo sed -i "/tmpfs/ s|mode=1777|mode=1777,size=${_MEM}|" ${file}
else
	sudo sh -c "echo '\ntmpfs                                       /tmp              tmpfs   defaults,noatime,mode=1777,size=${_MEM}     0 0' >> ${file}"
fi

[ "${_DEVICE_EXT}" ] && sudo sh -c "echo '
# btrfs ext
UUID=${uuidext}      /ext              btrfs   defaults,noatime,space_cache,autodefrag,compress=zstd           0    2
UUID=${uuidext}      /btrfs/ext        btrfs   defaults,noauto,noatime,space_cache,autodefrag,compress=zstd               0    2' >> ${file}"

_echO "$(cat "${file}")"

_echot "------------------ mount"
sudo mount /ext
sudo mount /save

_echot "------------------ create dirs & rights"
paths="${S_PATH_SCRIPT} ${S_PATH_LOG_INSTALL} ${S_PATH_LOG_SERVER} /btrfs/sys /btrfs/ext /ext ext/backups ext/ovh ext/shared /home /home/shared /home/shared/dev/bs /home/shared/www /opt /save/${_USERNAME}"
for path in ${paths}; do
	! [ -d ${path} ] && sudo mkdir -p ${path}
	sudo chown :1000 ${path}
	sudo chmod g+rwx ${path}
done

_echot "------------------ grub"

file=/etc/default/grub
grep -q '^GRUB_CMDLINE_LINUX=.*biosdevname' ${file} || sudo sed -i '/^GRUB_CMDLINE_LINUX=/ s|"$| biosdevname=0"|' ${file}
sudo update-grub

#mount -a

########################  END

_echoT "===================== ${_PART} end"
_partadd "${_PART}" "${S_FILE_INSTALL_DONE}"

_echot "------------------ reboot $_DEVICE_SYS"
_echoA "You have to start the global installation script after the reboot"
_echoa "The computer now will reboot"
_askno "Valid to continue"
reboot
exit

<<KEEP
_LXD=y
_SSD=
_MEM=2G
KEEP


<<KEEP

_echot "------------------ btrfs tools install"

sudo apt install -y apt-btrfs-snapshot snapper # system-storage-manage btrbk
# see https://github.com/agronick/apt-btrfs-snapper


########################  SNAPPER

file=/etc/snapper/config-templates/default
_keepcpts ${file}
str=${_USERNAME}; sed -i "s|^\(ALLOW_USERS=\).*|\1\"${str}\"|" $file
str=${_USERNAME}; sed -i "s|^\(ALLOW_GROUPS=\).*|\1\"${str}\"|" $file
str=no; sed -i "s|^\(TIMELINE_CREATE=\).*|\1\"${str}\"|" $file
str=no; sed -i "s|^\(TIMELINE_CLEANUP=\).*|\1\"${str}\"|" $file

file=/etc/updatedb.conf
cp -a $file $file.$(date +%s)
sed -i 's|^\(# PRUNENAMES.*\)|\1\nPRUNENAMES = ".snapshots"|' $file


cd /
# mandatory
snapper -c home.${_USERNAME} create-config /home/${_USERNAME}
snapper -c lxd create-config /var/lib/lxd
# full
snapper -c home create-config /home
snapper -c home.shared create-config /home/shared
snapper -c save create-config /savemkdir
snapper -c ext create-config /ext
snapper -c ext.backups create-config /ext/backups
snapper -c ext.ovh create-config /ext/ovh
snapper -c ext.shared create-config /ext/shared

snapper list-configs


########################  SNAPPER_GUI

# see https://github.com/ricardomv/snapper-gui
apt install -y python3 libgtksourceview-3.0-1 python3-dbus python3-setuptools

cd /tmp
wget https://github.com/ricardomv/snapper-gui/archive/master.zip
unzip master.zip
cd snapper-gui-master
python3 setup.py install

# shortcut
echo "[Desktop Entry]
Name=Snapper GUI
GenericName=Snapper GUI
Comment=Gui for snapper
Exec=gksudo snapper-gui
Terminal=false
Type=Application
Icon=/home/shared/Soft/multi/snapper.png
Categories=Application;GTK;Development;IDE;BTRFS;" > /home/${_USERNAME}/.local/share/applications/snapper-gui.desktop

KEEP

