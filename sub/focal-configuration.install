#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${S_RELEASE_NAME}-${_PART}"

grep -q "^# ${_PART}" "${S_FILE_INSTALL_CONF}" || echo -e "# ${_PART}" >> "${S_FILE_INSTALL_CONF}"

########################  REQUIRED

file_meld_conf=${S_PATH_INSTALL_CONF}/soft/meld-dark.xml

file_rsyslog_cron=${S_PATH_INSTALL_CONF}/rsyslog/cron.conf
file_rsyslog_client_auth=${S_PATH_INSTALL_CONF}/rsyslog/client-auth.conf
file_logrotate_server=${S_PATH_INSTALL_CONF}/logrotate/server

_require ${file_meld_conf}
_require ${file_rsyslog_cron} ${file_rsyslog_client_auth} ${file_logrotate_server}

path_vim=${S_PATH_INSTALL_CONF/-desktop/}/vim
_requirep ${path_vim}

########################  MAIN

_echoT "================== ${_PART} / global configuration"

_echoT "------------------ grub"

file=/etc/default/grub
_keepcpts ${file}
sudo sed -i "/^GRUB_TIMEOUT=/ s|=.*|=2|" ${file}
sudo sed -i "/^GRUB_HIDDEN_TIMEOUT_QUIET=/ s|=.*|=false|" ${file}
sudo sed -i "/^GRUB_HIDDEN_TIMEOUT_QUIET=/ s/^/#/" ${file}

file=/etc/grub.d/00_header
sudo sed -i "s|30|2|g" ${file}

sudo update-grub


if type vim >/dev/null 2>&1 ; then
	_echoT "------------------  vim links edit"

	for file in /usr/bin/edit /usr/bin/editor; do
		[ -e ${file} ] && _evalr rm ${file}
		_evalr ln -sv /usr/bin/vim ${file}
	done

	_echoT "------------------ dev vim"
	sudo cp ${path_vim}/* /usr/share/vim/vim*/colors/

	_echoT "----------  conf vim"
	file=/etc/vim/vimrc
	sudo sed -i "s|^\"\(syntax\).*|\1 on|" ${file}

	opts="background=dark showmatch"
	# uncomment
	for opt in $opts; do
		sudo sed -i "s|^\"\(set $opt.*\)$|\1|" ${file}
	done
fi


_echoT "------------------  /usr/local/bs/conf links"

for file in .nanorc .tmux.conf .vimrc; do
	path_from="${S_PATH_SCRIPT_CONF}/${file}"
	path=~/${file}
	[ -e "${path}" ] && sudo rm -fR ${path}
	ln -s "${path_from}" "${path}"
done

_echoT "------------------ gstreamer preset"
path=~/.local/share/gstreamer-1.0/presets
! [ -d "${path}" ] && mkdir -p ${path}

file=${path}/GstVorbisEnc.prs
_keepmvts ${file}
echo "[_presets_]
element-name=GstVorbisEnc
version=0.10

[ogg_high]
name=vorbisenc
perfect-timestamp=true
hard-resync=false
tolerance=40000000
quality=0.8
managed=false

[ogg_very_high]
name=vorbisenc
perfect-timestamp=true
hard-resync=false
tolerance=40000000
quality=0.9
managed=false" > ${file}

file=/usr/share/sound-juicer/rhythmbox.gep
_keepcpts ${file}
sch="\[streamprofile-oggvorbis-1\]"
str="preset = ogg_very_high"
sudo sed -i "/${sch}/ a ${str}" ${file}

sch="\[profile-oggopus\]"
str="[profile-oggvorbis2]\nname = oggvorbis2\ndescription = Ogg Vorbis High\nformat = application/ogg\ntype = container\n\n[streamprofile-oggvorbis-12]\nparent = oggvorbis2\ntype = audio\npreset = ogg_high\nformat = audio/x-vorbis\npresence = 1\n\n[profile-oggvorbis3]\nname = oggvorbis3\ndescription = Ogg Vorbis Very High\nformat = application/ogg\ntype = container\n\n[streamprofile-oggvorbis-13]\nparent = oggvorbis3\ntype = audio\npreset = ogg_very_high\nformat = audio/x-vorbis\npresence = 1\n"
sudo sed -i "/$sch/ i ${str}" ${file}

_echoT "------------------ dvd"
sudo dpkg-reconfigure libdvd-pkg

_echoT "------------------ git config"

git config --global user.name "aguy tech"
git config --global user.email aguytech@free.fr
git config --global core.editor nano
git config --global merge.tool meld

echo -e "[alias]
\tci = commit
\tco = checkout
\tst = status
\tbr = branch
" >> ~/.gitconfig

_echoT "------------------ meld style"
sudo cp ${file_meld_conf} /usr/share/meld/styles/meld-dark.xml

_echoT "------------------ nano"

for str in conf install; do
	sudo cp -a /usr/share/nano/sh.nanorc /usr/share/nano/${str}.nanorc
	sudo sed -i 's|^\(syntax \).*|\1"'${str}'" "\.'${str}'$"|' /usr/share/nano/${str}.nanorc
done

file=/etc/nanorc
_keepcpts ${file}
sudo sed -i 's|^.*\(set tabsize\).*|\1 4|' ${file}
sudo sed -i 's|^\(set cut.*\)$|# \1|' ${file}
sudo sed -i 's|^\(set linenumbers.*\)$|# \1|' ${file}
sudo sed -i '/^# *include/ s/^# //' ${file}

# various
opts="constantshow historylog matchbrackets multibuffer nohelp softwrap "
# color
opts+="errorcolor functioncolor keycolor numbercolor selectedcolor statuscolor stripecolor titlecolor"
# uncomment
for opt in ${opts}; do
	sudo sed -i "s|^.*\(set $opt .*\)$|\1|"  ${file}
done

_echoT "------------------ language-specs conf"
sudo cp -a ${S_PATH_INSTALL_CONF}/gtk/conf.lang /usr/share/gtksourceview-3.0/language-specs/
sudo cp -a ${S_PATH_INSTALL_CONF}/gtk/install.lang /usr/share/gtksourceview-3.0/language-specs/

_echoT "------------------ firefox tweaks"
path=~/.mozilla/firefox/${USER}
if [ -d "${path}" ]; then
	ln -sv "${S_PATH_SCRIPT_CONF}/user.js" ${path}
	chown 1000:1000 ${path}
else
	_echoI "please link '${S_PATH_INSTALL_CONF}/firefox/user.js'\nto your firefox path of profile: ${path}"
	_askno "Confirm"
fi

_echoT "------------------ tmux"

file=~/.tmux.conf

# plugins
path=~/.tmux/plugins/resurect
[ -d "${path}" ] || mkdir -p ${path}
git clone https://github.com/tmux-plugins/tmux-resurrect ${path}
grep -q resurrect.tmux ${file} || echo -e "# resurect plugin\nrun-shell ${path}/resurrect.tmux" >> ${file}

# set conf file
tmux source-file ${file} 2>/dev/null

_echoT "------------------  logrotate server"
# logrotate
sudo sh -c "echo '# Logrotate file for server functions logs
#$S_PATH_LOG_INSTALL/*.log
$S_PATH_LOG_SERVER/*.log
$S_PATH_LOG_SERVER/*.err
$S_PATH_LOG_SERVER/*.debug
{
	su 0 1000
	missingok
	compress
	delaycompress
	notifempty
	weekly
	rotate 8
}
' > /etc/logrotate.d/server"

_echoT "------------------ gtk styles"
file="$HOME/.local/share/gtksourceview-4"
! [ -e ${file} ] && ln -sv /home/shared/.local/share/gtksourceview-3.0 ${file}

_echoT "------------------ _LAPTOP"
[ "$_LAPTOP" ] && _service enable tlp


if [ -n "${_VIRTUALBOX}" ]; then
    _echoT "------------------ virtualbox"
    [ "$_VIRTUALBOX" ] && sudo adduser ${USER} vboxusers
fi

_echoT "------------------ gedit settings"
#dconf write /org/nemo/extensions/nemo-terminal/default-visible false
#gsettings set org.gnome.gedit.preferences.ui max-recents 30
gsettings set org.gnome.gedit.preferences.ui side-panel-visible true
gsettings set org.gnome.gedit.preferences.editor display-line-numbers true
gsettings set org.gnome.gedit.preferences.editor tabs-size 4

dconf write /org/gnome/gedit/plugins/sourcecodebrowser/show-line-numbers true
dconf write /org/gnome/gedit/plugins/filebrowser/enable-remote true

# plugins
path_plug=~/.local/share/gedit/plugins
! [ -d "${path_plug}" ] && mkdir -p ${path_plug}

_echoT "------------------ gedit / restore-tabs"
path=restore-tabs
cd ${path_plug}
_keepmvts ${path}
curl -o master.zip https://codeload.github.com/raelgc/gedit-restore-tabs/zip/master
unzip master.zip
rm master.zip
mv gedit-restore-tabs-master $path
rm $path/.gitignore
sudo cp $path/org.gnome.gedit.plugins.restoretabs.gschema.xml /usr/share/glib-2.0/schemas/
sudo glib-compile-schemas /usr/share/glib-2.0/schemas/

_echoT "------------------ gedit / duplicate-line"
path=duplicate-line
cd ${path_plug}
_keepmvts ${path}
curl -o master.zip https://codeload.github.com/hardpixel/gedit-duplicate-line/zip/master
unzip master.zip
rm master.zip
mv gedit-duplicate-line-master $path
sed -i 's|^\(\s*modifiers = event.state.*\)|#\1|' $path/duplicate_line.py
sed -i 's|^\(\s*\)\(if modifiers ==.*\)|#\1\2\n\1if event.state \& Gdk.ModifierType.CONTROL_MASK and event.state \& Gdk.ModifierType.SHIFT_MASK:|' $path/duplicate_line.py
#if event.state & Gdk.ModifierType.CONTROL_MASK and event.state & Gdk.ModifierType.SHIFT_MASK:

_echoT "------------------ gedit / gedit-markdown"
path=markdown_preview
cd ${path_plug}
_keepmvts ${path}
curl -o master.zip https://codeload.github.com/maoschanz/gedit-plugin-markdown_preview/zip/master
unzip master.zip
rm master.zip
mv gedit-plugin-markdown_preview-master ${path}


_echoT "------------------ launcher clean"
sudo sed -i 's|;;|;|' /usr/share/applications/*.desktop

########################  CRON

_echoT "------------------  cron conf"

file=/etc/crontab
_keepcpts ${file}
str="MAILTO=${S_DOMAIN_EMAIL_TECH}"
grep -q '^MAILTO' "${file}" || _eval "sed -i '/^PATH=.*/ a ${str}' ${file}"

########################  RSYSLOG

_echoT "------------------  rsyslog conf"

file="/etc/rsyslog.conf"
_keepcpts "${file}"

# udp
if [ "${S_RSYSLOG_PTC}" = udp ]; then
	_eval "sed -i 's|^#\?\(module(load=\"imudp.*\)$|\1|' ${file}"
	_eval "sed -i 's|^#\?\(input(type=\"imudp\"\).*$|\1 port=\"${S_RSYSLOG_PORT}\")|' ${file}"
# tcp
elif [ "${S_RSYSLOG_PTC}" = tcp ]; then
	_eval "sed -i 's|^#\?\(module(load=\"imtcp.*\)$|\1|' ${file}"
	_eval "sed -i 's|^#\?\(input(type=\"imtcp\"\).*$|\1 port=\"${S_RSYSLOG_PORT}\")|' ${file}"
fi

_echoT "------------------  rsyslog restart"
_service restart rsyslog

_echoT "------------------  rsyslog conf"
sed -i '/^auth.*/ s|^|#|' /etc/rsyslog.d/50-default.conf
sed -i '/^cron.*/ s|^|#|' /etc/rsyslog.d/50-default.conf

_echoT "------------------  rsyslog cron"
file=/etc/rsyslog.d/70-${file_rsyslog_cron##*/}
_evalq cp -a ${file_rsyslog_cron} ${file}
_var_replace ${file} rsyslog

_echoT "------------------  rsyslog client-auth"
file=/etc/rsyslog.d/72-${file_rsyslog_client_auth##*/}
_evalq cp -a ${file_rsyslog_client_auth} ${file}
_var_replace ${file} rsyslog

#TODO add rsyslog mail
<<KEEP
_echoT "------------------  rsyslog client-mail conf"
file="/etc/rsyslog.d/70-default.conf"
# stop mail logs for syslog
! grep -q "mail\.\*\s*stop" "${file}" && sed -i '/^mail\.err/ amail.*              stop' "${file}"
KEEP

########################  LOGROTATE

_echoT "------------------  logrotate global"
file=/etc/logrotate.conf
_eval  "sed -i '/^#dateext/ s|^#||' ${file}"

_echoT "------------------  logrotate server"
file=/etc/logrotate.d/${file_logrotate_server##*/}
_eval cp -a ${file_logrotate_server} ${file}
_var_replace ${file} logrotate

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART} ${S_FILE_INSTALL_DONE}

