#!/bin/bash
#
# write by Aguy

echo "####################  ${BASH_SOURCE[0]}  ####################"

######################## global functions
S_TRACE=debug

# allow conf-init
_INSTALL=ubuntu
_PATH_LOG=/var/log/install

path=`dirname "${BASH_SOURCE[0]}"`
if [[ -z "${S_GLOBAL_FUNCTIONS}" || ! -f ${S_GLOBAL_FUNCTIONS} ]]; then
	S_GLOBAL_FUNCTIONS=`readlink -e "${path}/../bs/inc-functions.sh"`
	if ! [ -f "${S_GLOBAL_FUNCTIONS}" ]; then echo -e "\e[1;31m[error] - unable to find file '${S_GLOBAL_FUNCTIONS}' from ${BASH_SOURCE[0]}\e[0;0m"; exit 1; fi
fi
. ${S_GLOBAL_FUNCTIONS}

########################  DATA

_PATH_SSH_KEEP="/home/shared/.perso/.ssh"
[ -d ~/Soft/multi ] && _PATH_SOFT=~/Soft/multi || _PATH_SOFT=/ext/shared/Soft/multi
_PATH_SOFT_BACKUP=${_PATH_SOFT}/backup

# after btrfs1
if ! grep -q '^S_RELEASE_NAME=' "${S_FILE_INSTALL_CONF}"; then
	sed -i "1i _SCRIPT=\"${_INSTALL/%.install}\"\nS_RELEASE_NAME=\"$S_RELEASE_NAME\"\n" "${S_FILE_INSTALL_CONF}"
fi

########################  CONF

[ -f "${S_FILE_INSTALL_CONF}" ] && . "${S_FILE_INSTALL_CONF}"


########################  RIGHTS

_echoT "----------  path log rights"

for path in ${S_PATH_LOG_SERVER} ${S_PATH_LOG_INSTALL}; do
	[ ${USER} != root ] && _evalqr chown -R :1000 ${path} && _evalqr chmod -R g+rw ${path}
done


########################  BS

file="/etc/profile.d/bs_path.sh"
sudo [ ! -e "$file" ] && sudo sh -c "echo 'export PATH=${PATH}:/usr/local/bs' >> ${file}"


######################## BTRFS2

_PART=btrfs2
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install; [ "$_STEP" ] && _askno "Valid to continue"; else _echoI "performed *** ${_PART}"; fi


########################  REQUIRE

_echoT "----------  ${_PATH_SOFT}"

_requirep ${_PATH_SSH_KEEP} ${_PATH_SOFT}

[ -d "${_PATH_SOFT}" ] && ! [ -w "${_PATH_SOFT}" ] && sudo find "${_PATH_SOFT}" -type d -exec sudo chown :1000 "{}" \; -exec sudo chmod g+rw "{}" \;


########################  HALT

[ -z ${_STEP+x} ] && anstmp=n && _askno "Do you want an installation with halts for each parts ($anstmp)" && _STEP=${_ANSWER:-$anstmp} && _STEP=${_STEP/n/} && _confset _STEP "$_STEP"


########################  CONF
str="# install"; ! grep -q "^${str}" "${S_FILE_INSTALL_CONF}" && echo -e "\n${str}" >> "${S_FILE_INSTALL_CONF}"

#[ -z ${S_RELEASE_NAME+x} ] && anstmp="${S_RELEASE_NAME}" && _askno "Give the name of release ($_ANSWER)"  && S_RELEASE_NAME=${_ANSWER} && _confset S_RELEASE_NAME "${S_RELEASE_NAME}"

[ -d /etc/xdg/xfce4 ] && S_RELEASE_DESKTOP="xfce"
[ -d /etc/gdm* ] && S_RELEASE_DESKTOP="gnome"
if [ "${S_RELEASE_DESKTOP}" ]; then
	_echoI "Dekstop environement are ${S_RELEASE_DESKTOP}"
else
	_menu "Select a desktop environement for manjaro" xfce gnome && S_RELEASE_DESKTOP=$_ANSWER && _confset S_RELEASE_DESKTOP "${S_RELEASE_DESKTOP}"
fi

# if not btrfs
[ -z ${_LXD+x} ] && anstmp=y && _askno "Do you want to configure computer for lxd ($anstmp)" && _LXD=${_ANSWER:-$anstmp} && _LXD=${_LXD/n/} && _confset _LXD "$_LXD"

[ -z ${_USERNAME+x} ] && _menu "Select a user name" ${S_RELEASE_NAME} && _USERNAME=$_ANSWER && _confset _USERNAME "${_USERNAME}"

[ -z ${_SYSNAME+x} ] && anstmp="${_SYSNAME}" && _askno "Give the btrfs volume name for system device '$_DEVICE_SYS' for btrfs ($anstmp)" && _SYSNAME=${_ANSWER:-$anstmp} && _confset _SYSNAME "$_SYSNAME"


[ -z ${_LAPTOP+x} ] && anstmp=n && _askno "Do you want an installation for laptop ($anstmp)" && _LAPTOP=${_ANSWER:-$anstmp} && _LAPTOP=${_LAPTOP/n/} && _confset _LAPTOP "$_LAPTOP"

[ -z ${_DEV+x} ] && anstmp=y && _askno "Do you want install 'developping' softwares? ($anstmp)" && _DEV=${_ANSWER:-$anstmp} && _DEV=${_DEV/n/} && _confset _DEV "$_DEV"

[ -z ${_VIDEO+x} ] && anstmp=n && _askno "Do you want install 'videos' softwares? ($anstmp)" && _VIDEO=${_ANSWER:-$anstmp} && _VIDEO=${_VIDEO/n/} && _confset _VIDEO "$_VIDEO"

[ -z ${_NETWORK+x} ] && anstmp=n && _askno "Do you want install 'network' softwares? ($anstmp)" && _NETWORK=${_ANSWER:-$anstmp} && _NETWORK=${_NETWORK/n/} && _confset _NETWORK "$_NETWORK"

[ -z ${_VMWARE+x} ] && anstmp=n && _askno "Do you want install 'vmware' software? ($anstmp)" && _VMWARE=${_ANSWER:-$anstmp} && _VMWARE=${_VMWARE/n/} && _confset _VMWARE "$_VMWARE"

[ -z ${_VIRTUALBOX+x} ] && anstmp=n && _askno "Do you want install 'virtualbox' software? ($anstmp)" && _VIRTUALBOX=${_ANSWER:-$anstmp} && _VIRTUALBOX=${_VIRTUALBOX/n/} && _confset _VIRTUALBOX "$_VIRTUALBOX"

[ -z ${_FREECAD+x} ] && anstmp=n && _askno "Do you want install 'freecad' software? ($anstmp)" && _FREECAD=${_ANSWER:-$anstmp} && _FREECAD=${_FREECAD/n/} && _confset _FREECAD "$_FREECAD"

[ -z ${_SSH_BACK+x} ] && _menu "Select an ssh identity for user ${_USERNAME}" none $(ls -a1 -I. -I.. -I.ssh-all ${_PATH_SSH_KEEP}|xargs) && _SSH_BACK=${_ANSWER/none/} && _confset _SSH_BACK "$_SSH_BACK"

[ -z ${_SSH_BACK_ROOT+x} ] && _menu "Select an ssh identity for user root" none $(ls -a1 -I. -I.. -I.ssh-all ${_PATH_SSH_KEEP}|xargs) && _SSH_BACK_ROOT=${_ANSWER/none/} && _confset _SSH_BACK_ROOT "$_SSH_BACK_ROOT"


########################  COMMON-

_PART=common
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install; [ "$_STEP" ] && _askno "Valid to continue"; else _echoI "performed *** ${_PART}"; fi

########################  REPOSITORIES-

_PART=repositories
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install; [ "$_STEP" ] && _askno "Valid to continue"; else _echoI "performed *** ${_PART}"; fi

########################  UPGRADE-

_PART=upgrade
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install; [ "$_STEP" ] && _askno "Valid to continue"; else _echoI "performed *** ${_PART}"; fi

########################  INSTALL-

_PART=install
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
	! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
	[ "$_STEP" ] && _askno "Valid to continue"
else
	_echoI "performed *** ${_PART}"
fi

########################  LXD-

if [ "$_LXD" ]; then
    _PART=lxd
    if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
		! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
		[ "$_STEP" ] && _askno "Valid to continue"
    else
		_echoI "performed *** ${_PART}"
	fi
fi

########################  DEV-

if [ "$_DEV" ]; then
	_PART=dev
	if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
		! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
		[ "$_STEP" ] && _askno "Valid to continue"
	else
		_echoI "performed *** ${_PART}"
	fi
fi

########################  CONFIGURATION-

_PART=configuration
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
	! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
	[ "$_STEP" ] && _askno "Valid to continue"
else
	_echoI "performed *** ${_PART}"
fi

########################  LAUNCHER-

_PART=launcher
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
	! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
	[ "$_STEP" ] && _askno "Valid to continue"
else
	_echoI "performed *** ${_PART}"
fi

########################  AUTOSTART-

_PART=autostart
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
	! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
	[ "$_STEP" ] && _askno "Valid to continue"
else
	_echoI "performed *** ${_PART}"
fi

########################  SSH-

_PART=ssh
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
	! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
	[ "$_STEP" ] && _askno "Valid to continue"
else
	_echoI "performed *** ${_PART}"
fi


########################  ROOT-

_PART=root
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
	! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
	[ "$_STEP" ] && _askno "Valid to continue"
else
	_echoI "performed *** ${_PART}"
fi

########################  END-

_PART=end
if ! _parthave ${_PART} ${S_FILE_INSTALL_DONE}; then
	! . ${_PATH_BASE_SUB}/${S_RELEASE_NAME}-${_PART}.install && echo "wrong '${_PART}'" && exit
	[ "$_STEP" ] && _askno "Valid to continue"
else
	_echoI "performed *** ${_PART}"
fi

_echoT "####################  end  ####################"

_echoI "\n!!!!! This installation are complety DONE ;o) !!!!!"

<<KEEP

######################## m_audio_delta_66

# driver mudita24 replace Envy24
sudo apt install -y mudita24


########################  FIREFOX

about:config
browser.search.openintab;true
browser.tabs.loadBookmarksInTabs;true
browser.tabs.insertRelatedAfterCurrent;true


########################  FLASH

sudo apt install --reinstall flashplugin-installer ttf-mscorefonts-installer


########################  SHUT_DOWN

#sudo systemctl disable NetworkManager-wait-online.service
#sudo systemctl disable plymouth-quit-wait.service


########################  USB_SYSTEM

sudo cp -p /etc/fstab /etc/fstab.keep; echo "tmpfs   /tmp		tmpfs   defaults,noatime,mode=1777	0 0
tmpfs   /var/tmp	tmpfs   defaults,noatime,mode=1777	0 0
tmpfs   /var/lock	tmpfs   defaults,noatime,mode=1777	0 0
tmpfs   /var/log	tmpfs   defaults,noatime		0 0
tmpfs   /var/run	tmpfs   defaults,noatime,mode=0755	0 0
tmpfs   /var/cache/apt	tmpfs   defaults			0 0
#tmpfs   /var/cache	tmpfs   defaults,noatime,mode=0755	0 0" | sudo tee -a /etc/fstab


########################  USB_LIVE

# update_kernel
sudo mv /usr/sbin/update-initramfs /usr/sbin/update-initramfs.keep; sudo ln -s /rofs/usr/sbin/update-initramfs /usr/sbin/update-initramfs; sudo dpkg --configure -a # copy initrd & vmlinuz to /casper

keep

<<global

sudo apt install -y fslint acpi gnupg2 dstat htop sysstat pv tree openssh-server sysinfo testdisk gparted kpartx meld synaptic openjdk-8-jre icedtea-8-plugin gdebi p7zip-rar p7zip-full rar unrar jq hfsprogs \
gir1.2-gtop-2.0 gir1.2-networkmanager-1.0 gir1.2-clutter-1.0 \
gnome-tweak-tool numlockx dconf-tools multisystem boot-repair gnome-activity-journal gnome-sushi gnome-system-tools font-manager y-ppa-manager redshift backintime-gnome \
nautilus-sendto easytag-nautilus nautilus-actions nautilus-admin nautilus-compare nautilus-columns nautilus-emblems nautilus-gtkhash nautilus-hide nautilus-ideviceinfo nautilus-image-manipulator nautilus-script-audio-convert nautilus-script-debug nautilus-scripts-manager nautilus-wipe seahorse-nautilus \
gedit-developer-plugins gedit-plugins gedit-source-code-browser-plugin \
owncloud-client owncloud-client-cmd csync-owncloud nautilus-owncloud \
language-pack-fr language-pack-fr-base language-pack-gnome-fr language-pack-gnome-fr-base hunspell-fr hunspell-fr-classical hyphen-fr mythes-fr firefox-locale-fr thunderbird-locale-fr libreoffice-help-fr libreoffice-l10n-fr tesseract-ocr-fra gimp-help-fr \
libreoffice libreoffice-avmedia-backend-gstreamer libreoffice-base libreoffice-base-drivers libreoffice-calc libreoffice-draw libreoffice-gnome libreoffice-gtk3 libreoffice-impress libreoffice-math libreoffice-mysql-connector libreoffice-ogltrans libreoffice-pdfimport libreoffice-report-builder libreoffice-sdbc-postgresql libreoffice-style-galaxy libreoffice-style-human libreoffice-style-oxygen libreoffice-style-tango libreoffice-templates libreoffice-voikko libreoffice-wiki-publisher libreoffice-writer libreoffice-writer2xhtml scribus scribus-template \
isomaster brasero qarte amule amule-gnome-support gnome-subtitles audacity mixxx tangerine tesseract-ocr-fra ubuntu-restricted-extras mozplugger easytag soundconverter sound-juicer vlc gnome-xcf-thumbnailer stopwatch lightzone darktable youtube-dl \
gmusicbrowser gmusicbrowser-art unity-scope-gmusicbrowser gpodder goobox gstreamer1.0-plugins-bad gstreamer1.0-plugins-bad-faad pulseaudio-equalizer ubuntu-restricted-extras cdrdao cue2toc bchunk ccd2iso mdf2iso nrg2iso \
gimp-data gimp-data-extras gimp-dds gimp-gap gimp-gmic gimp-gutenprint gimp-lensfun gimp-normalmap 'gimp-save-for-web' gimp-texturize gimp-ufraw gtkam-gimp pandora create-resources inkscape ijsgutenprint ink-generator sozi xsane \
totem totem-plugins totem-plugins-extra kdenlive kdenlive-data gnome-video-effects-extra mkvtoolnix-gui handbrake-gtk handbrake-cli libdvdread4 libdvdnav4 dpluzz libavcodec-extra libdvd-pkg gnome-do gnome-do-plugins \
pidgin pidgin-awayonlock pidgin-bot-sentry pidgin-encryption pidgin-gnome-keyring pidgin-hotkeys pidgin-libnotify pidgin-microblog pidgin-openpgp pidgin-plugin-pack pidgin-skype pidgin-themes \
freecad freecad-extras-drawing-dimensioning freecad-extras-lattice2 freecad-extras-eaglepcb2freecad freecad-extras-macroparttovrml freecad-doc freecad-extras-fasteners freecad-extras-sheetmetal freecad-extras-animation freecad-extras-idfimporter freecad-extras-timber freecad-extras-assembly2 freecad-extras-kicadstepuptools freecad-extras-workfeature freecad-extras-bolts freecad-extras-kicadstepuptools-wb freecad-extras-cadquery freecad-extras-lattice \
chromium-browser \
ghex mariadb-client postgresql-client git \
pgadmin4 mytop dia-gnome dia2code dia-shapes postgresql-autodoc umbrello kcachegrind graphviz xdot gitk gitg wireshark zenmap

# skype
https://www.skype.com/fr/get-skype/

global

KEEP
